++++++++++++++++++++++++++++++++++
GraphQL and Python and My Opinions
++++++++++++++++++++++++++++++++++

GraphQL is three steps forward and two steps back.

What led to GraphQL?
====================

This is the story I heard.  I don't know how true it is.

The Facebook mobile app team complained that working with their REST API
had these problems:

*   Each screen required dozens of separate queries.

*   Each query is a network call that used up limited customer data.

*   Even if data is free, each query takes time!

*   Each response came back with way more data than they really needed.
    There was no built-in way to list the fields they needed.

This is what I imagine they dealt with
======================================

Pretend we have to make the Facebook news feed page.  We might do it
like this:

A.  Get this user's friends (1 query).

B.  For each friend, get recent posts for that user.  That means you
    make N queries, where is the number of friends of this person.

C.  Sort the posts by time (or whatever method they use) in application code.

D.  Show the first X posts.

They could just write an API for every screen!
==============================================

When you make a screen, you tell the API team what data you need, and
they make you an API for that screen, with exactly the data you need,
fetched as efficiently as possible.

Problems:

*   This is labor-intensive!

*   When screen A and screen B and screen C share 50% of the same needs,
    you either copy and paste code, or you don't fetch it efficiently,
    or you write a complex SQL query that triggers madness in all who
    try to read it.

*   What if screens are dynamic / determined at run time?  For example,
    imagine a web-based spreadsheet where people can punch buttons to
    show and hide columns.

They could just cache in the client!
====================================

The app could cache as much data as possible and it is really clever
about only pulling down updates.

The source control system git kind of works like this.  So does couchDB.

Problems:

*   In my experience, caching is the single biggest source of bugs.

*   Wikipedia has 17 different cache replacement algorithms and all of
    them have one scenario where they don't work great.

However, this is a really interesting (to me) idea!

GraphQL client query examples
=============================

Using the github API...

https://developer.github.com/v4/explorer/

Simple example
==============

Get "stuff" about the viewer, like their name and company::

    {
      viewer {
        login
        company
      }
    }

Use a parameter in a query
==========================

Get "stuff" about some arbitrary user (take a name from the audience)::

    {
      user(login: "bormesh") {
        id
        name
        company
        email
      }
    }

Get my most recent gists
========================

This is where it gets a little more interesting::

    {
      viewer {
        login
        company
        gists(orderBy: {field: CREATED_AT, direction: DESC}, first: 10) {
          edges {
            node {
              description
              url
              createdAt
            }
          }
        }
      }
    }

If this were SQL, I would need to specify how to connect this viewer to
the company.

Get recent open issues for a particular repository
==================================================

One repo has many issues (especially if it is something I've worked
on)::

    {
      repository(name: "horsemeat", owner: "216software") {
        name
        description
        createdAt
        issues(first: 10, orderBy: {field: CREATED_AT, direction: DESC}) {
          edges {
            node {
              id
              title
            }
          }
        }
      }
    }


Really simple python client
===========================

These examples use the gql_ package.

.. _gql: https://github.com/graphql-python/gql

`gql_viewer.py`_

.. _gql_viewer.py: gql_viewer.py

Python client example using a variable
======================================

`gql_user.py`_

.. _gql_user.py: gql_user.py

Notice:

*   I had to spell out the variables I was gonna use at the beginning!

*   The dollar sign is in the query, but not in the variable name.


Contrived SQL example
=====================

Imagine a small bar has a database to track musicians and when they
play::

    bogus_bar.sql

If you love SQL, it's easy to do stuff like this::

    -- List the schedule.
    select events.event_date, musicians.name, musicians.website_url
    from events
    join musicians
    on events.musician_id = musicians.musician_id
    where event_date > current_timestamp
    and event_date < current_timestamp + interval '30 days'
    order by event_date

But maybe you want to make a view to make it easier on yourself, so you
make a view, that joins the tables together::

    select * from upcoming_shows;

GraphQL is kind of like that view!

When you have that view, you query it, and you list out what rows and
what columns you want.

What I like
===========

*   You build up a graph of all your data, and you can cover a lot of
    your typical data-collection stuff that would normally be a crapload
    of boring work is now done!

*   If some of your data is expensive to get, in other words, really
    slow to retrieve, then you can write a resolver so that it only
    retrieves that data when explicitly asked for.

What I dislike
==============

*   Selectively Caching POSTs based on payloads is not easy

*   You need to log POST data if you want to analyze slow operations.
    Everything looks the same!

*   Using curl with GraphQL isn't fun!

*   Using POSTs for reads goes against tradition.

*   Everything spits back a 200 OK.

*   Downloading a schema triggers SOAP and CORBA nightmare flashbacks.

*   Schemas where the return type is JSON shut down the client's ability
    to cherry-pick the returned data.

*   two-space indents

Warnings
========

*   People love putting a single GraphQL server in front of multiple
    services.  So depending on what fields you ask for, your query could
    be doing completely different things!

*   Like many other abstractions, you often will need to know what is
    going on underneath:

    *   When you say "give me rows 21 through 30!" does the pagination
        do what you want it to do, or does it retrieve all 500 rows
        every time and then discard them all?

    *   When you say "give me the objects with IDs in {11, 14, 19}, you make
        one POST to the GraphQL server, but does that server make one
        request for each object or does it get them in a single query?

    *   In the musicians example, the GraphQL schema says I can ask
        for every musician's instagram profile picture.  Just asking for
        that might trigger a separate network call for every artist.

        Or it might not!

        You can't tell unless you read the resolvers.


Using curl with GraphQL is terrible!
====================================

Look at these files:

*   `curl_example_viewer.sh`_
*   `curl_example_user.sh`_

.. _curl_example_viewer.sh: curl_example_viewer.sh
.. _curl_example_user.sh: curl_example_user.sh

Here's an example of how to use curl::

    #! /bin/bash -e

    echo "Looking up stuff for $2..."

    /usr/bin/curl -X POST \
    -H "Authorization: bearer $GITHUB_TOKEN" \
    -d '{ "query": "query { user(login: \"'$1'\") { login company }}"
    }' https://api.github.com/graphql


Talk to me!
===========

matt@216software.com

.. vim: set syntax=rst:
