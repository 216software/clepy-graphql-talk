++++++++++++++++++++++++++++++++++
GraphQL and Python and my Opinions
++++++++++++++++++++++++++++++++++

What problem led to GraphQL?
============================

At one time,

Then relational databases climbed out of the primordial ooze in the
1970s.

We all learned normalization forms and we wrote queries that joined
tables in novel and interesting ways.

Then we lost our way.

We made REST endpoints for each table separate and then used application
code to join data.

GraphQL is kind of like a SQL view
==================================

In SQL, you make a bunch of tables.  Then you write a select query that
joins all those tables together.

The Grog Shop is a small bar and music venue in Cleveland Heights.  They
keep a list of upcoming shows on their website.

TODO: show a picture of upcoming shows at The Grog Shop.

You can imagine that a database for the Grog Shop has these tables:

* musicians

  * musician_id
  * name
  * description
  * thumbnail_picture_url

* events
  * event_id
  * name
  * event_date
  * doors_open
  * ticket_price

* event_lineups
  * event_id
  * musician_id
  * lineup_order
  * headliner (true or false)

TODO: write a SQL file with the actual table definitions for these.
TODO: write some INSERT statements to put some real data in there.

You might run a query like this to show upcoming events in the next 30
days::

  select events.event_date, events.name, musicians.name

  join event_lineups
  on events.event_id = event_lineups.event_id

  join musicians
  on event_lineups.musician_id = musicians.musician_id

  -- only show future shows
  where events.event_date > current_timestamp

  -- only show the next 30 days worth of events
  and events.event_date < current_timestamp + interval 30 days

  order by events.event_date,
  event_lineups.headliner, -- put headliners first
  event_lineups.lineup_order

If you find yourself doing that same select a bunch of times, you might
create a view in your database, and just select from that view.

GraphQL is kind of like that view!

When you have that view, you query it, and you list out what rows and
what columns you want.

What I like
===========

*   You build up a graph of all your data, and you can cover a lot of
    your typical data-collection stuff that would normally be a crapload
    of boring work is now done!

*   If some of your data is expensive to get, in other words, really
    slow to retrieve, then you can write a resolver so that it only
    retrieves that data when explicitly asked for.


What I dislike
==============

*   Using curl with GraphQL isn't fun

*   Using POSTs for reads goes against tradition

*   Selectively Caching POSTs based on payloads is not easy

*   You need to log POST data if you want to analyze slow operations

*   Or you need a new set of tools

Warnings
========

*   You'll likely need to handle mutations one by one.

TODO: put in a picture of that misfits "evil never dies" album cover but put
"n+1" over evil.

*   Ruby on Rails might be in the rear view mirror, but N+1 is back in a
    big way!

*   Like many other abstractions, you often will need to know what is
    going on underneath:

    *   When you say "give me rows 21 through 30!" does the pagination
        do what you want it to do, or does it retrieve all 500 rows
        every time and then discard them all?

    *   When you say "give me the objects with IDs in {11, 14, 19}, you make
        one POST to the GraphQL server, but does that server make one
        request for each object or does it get them in a single query?

    *   In the musicians example, the GraphQL schema says I can ask
        for every musician's instagram profile picture.  Just asking for
        that might trigger a separate network call for every artist.

        Or it might not!

        You can't tell unless you read the resolvers.

*   When you write resolvers, you need to make sure that you think
    through who is asking for what data.

    In other words, GraphQL doesn't solve thorny authorization issues.

    For example, imagine that you make a GraphQL interface for a bank.
    You limit access to logged-in users.  But in your resolvers, you
    need to make sure that Matt is only accessing data that Matt is
    blessed to access.

    To be fair, this is a problem that has been around forever.



When I would use it
===================

It makes a ton of sense for Github to set up a GraphQL API.  Every
different client can request a subset of all the possible fields.

Github would have to make dozens and dozens of JSON APIs to accomodate
all the different subsets of data you can get back.


What is GraphQL?
================

GraphQL vs good old JSON APIs
=============================

How to write a Python client for the github GraphQL API?
========================================================

How to write a python GraphQL server?
=====================================

Final Thoughts
==============

GraphQL is a big step forward when it comes to writing APIs for reading
data.








.. vim: set syntax=rst:
